// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/DyadyaRodya/go-shortener/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// Usecases is an autogenerated mock type for the Usecases type
type Usecases struct {
	mock.Mock
}

type Usecases_Expecter struct {
	mock *mock.Mock
}

func (_m *Usecases) EXPECT() *Usecases_Expecter {
	return &Usecases_Expecter{mock: &_m.Mock}
}

// CheckConnection provides a mock function with given fields: ctx
func (_m *Usecases) CheckConnection(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Usecases_CheckConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckConnection'
type Usecases_CheckConnection_Call struct {
	*mock.Call
}

// CheckConnection is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Usecases_Expecter) CheckConnection(ctx interface{}) *Usecases_CheckConnection_Call {
	return &Usecases_CheckConnection_Call{Call: _e.mock.On("CheckConnection", ctx)}
}

func (_c *Usecases_CheckConnection_Call) Run(run func(ctx context.Context)) *Usecases_CheckConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Usecases_CheckConnection_Call) Return(_a0 error) *Usecases_CheckConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Usecases_CheckConnection_Call) RunAndReturn(run func(context.Context) error) *Usecases_CheckConnection_Call {
	_c.Call.Return(run)
	return _c
}

// CreateShortURL provides a mock function with given fields: ctx, URL
func (_m *Usecases) CreateShortURL(ctx context.Context, URL string) (*entity.ShortURL, error) {
	ret := _m.Called(ctx, URL)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortURL")
	}

	var r0 *entity.ShortURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.ShortURL, error)); ok {
		return rf(ctx, URL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.ShortURL); ok {
		r0 = rf(ctx, URL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ShortURL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, URL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecases_CreateShortURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateShortURL'
type Usecases_CreateShortURL_Call struct {
	*mock.Call
}

// CreateShortURL is a helper method to define mock.On call
//   - ctx context.Context
//   - URL string
func (_e *Usecases_Expecter) CreateShortURL(ctx interface{}, URL interface{}) *Usecases_CreateShortURL_Call {
	return &Usecases_CreateShortURL_Call{Call: _e.mock.On("CreateShortURL", ctx, URL)}
}

func (_c *Usecases_CreateShortURL_Call) Run(run func(ctx context.Context, URL string)) *Usecases_CreateShortURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Usecases_CreateShortURL_Call) Return(_a0 *entity.ShortURL, _a1 error) *Usecases_CreateShortURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecases_CreateShortURL_Call) RunAndReturn(run func(context.Context, string) (*entity.ShortURL, error)) *Usecases_CreateShortURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetShortURL provides a mock function with given fields: ctx, ID
func (_m *Usecases) GetShortURL(ctx context.Context, ID string) (*entity.ShortURL, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetShortURL")
	}

	var r0 *entity.ShortURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.ShortURL, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.ShortURL); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ShortURL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Usecases_GetShortURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShortURL'
type Usecases_GetShortURL_Call struct {
	*mock.Call
}

// GetShortURL is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *Usecases_Expecter) GetShortURL(ctx interface{}, ID interface{}) *Usecases_GetShortURL_Call {
	return &Usecases_GetShortURL_Call{Call: _e.mock.On("GetShortURL", ctx, ID)}
}

func (_c *Usecases_GetShortURL_Call) Run(run func(ctx context.Context, ID string)) *Usecases_GetShortURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Usecases_GetShortURL_Call) Return(_a0 *entity.ShortURL, _a1 error) *Usecases_GetShortURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Usecases_GetShortURL_Call) RunAndReturn(run func(context.Context, string) (*entity.ShortURL, error)) *Usecases_GetShortURL_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsecases creates a new instance of Usecases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecases(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecases {
	mock := &Usecases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
