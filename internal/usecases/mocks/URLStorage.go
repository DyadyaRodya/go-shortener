// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/DyadyaRodya/go-shortener/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	usecases "github.com/DyadyaRodya/go-shortener/internal/usecases"
)

// URLStorage is an autogenerated mock type for the URLStorage type
type URLStorage struct {
	mock.Mock
}

type URLStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *URLStorage) EXPECT() *URLStorage_Expecter {
	return &URLStorage_Expecter{mock: &_m.Mock}
}

// AddURL provides a mock function with given fields: ctx, ShortURL
func (_m *URLStorage) AddURL(ctx context.Context, ShortURL *entity.ShortURL) error {
	ret := _m.Called(ctx, ShortURL)

	if len(ret) == 0 {
		panic("no return value specified for AddURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.ShortURL) error); ok {
		r0 = rf(ctx, ShortURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// URLStorage_AddURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddURL'
type URLStorage_AddURL_Call struct {
	*mock.Call
}

// AddURL is a helper method to define mock.On call
//   - ctx context.Context
//   - ShortURL *entity.ShortURL
func (_e *URLStorage_Expecter) AddURL(ctx interface{}, ShortURL interface{}) *URLStorage_AddURL_Call {
	return &URLStorage_AddURL_Call{Call: _e.mock.On("AddURL", ctx, ShortURL)}
}

func (_c *URLStorage_AddURL_Call) Run(run func(ctx context.Context, ShortURL *entity.ShortURL)) *URLStorage_AddURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.ShortURL))
	})
	return _c
}

func (_c *URLStorage_AddURL_Call) Return(_a0 error) *URLStorage_AddURL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *URLStorage_AddURL_Call) RunAndReturn(run func(context.Context, *entity.ShortURL) error) *URLStorage_AddURL_Call {
	_c.Call.Return(run)
	return _c
}

// Begin provides a mock function with given fields: ctx
func (_m *URLStorage) Begin(ctx context.Context) (usecases.Transaction, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 usecases.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (usecases.Transaction, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) usecases.Transaction); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecases.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URLStorage_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type URLStorage_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *URLStorage_Expecter) Begin(ctx interface{}) *URLStorage_Begin_Call {
	return &URLStorage_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *URLStorage_Begin_Call) Run(run func(ctx context.Context)) *URLStorage_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *URLStorage_Begin_Call) Return(_a0 usecases.Transaction, _a1 error) *URLStorage_Begin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *URLStorage_Begin_Call) RunAndReturn(run func(context.Context) (usecases.Transaction, error)) *URLStorage_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// GetShortByURL provides a mock function with given fields: ctx, URL
func (_m *URLStorage) GetShortByURL(ctx context.Context, URL string) (*entity.ShortURL, error) {
	ret := _m.Called(ctx, URL)

	if len(ret) == 0 {
		panic("no return value specified for GetShortByURL")
	}

	var r0 *entity.ShortURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.ShortURL, error)); ok {
		return rf(ctx, URL)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.ShortURL); ok {
		r0 = rf(ctx, URL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ShortURL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, URL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URLStorage_GetShortByURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShortByURL'
type URLStorage_GetShortByURL_Call struct {
	*mock.Call
}

// GetShortByURL is a helper method to define mock.On call
//   - ctx context.Context
//   - URL string
func (_e *URLStorage_Expecter) GetShortByURL(ctx interface{}, URL interface{}) *URLStorage_GetShortByURL_Call {
	return &URLStorage_GetShortByURL_Call{Call: _e.mock.On("GetShortByURL", ctx, URL)}
}

func (_c *URLStorage_GetShortByURL_Call) Run(run func(ctx context.Context, URL string)) *URLStorage_GetShortByURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *URLStorage_GetShortByURL_Call) Return(_a0 *entity.ShortURL, _a1 error) *URLStorage_GetShortByURL_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *URLStorage_GetShortByURL_Call) RunAndReturn(run func(context.Context, string) (*entity.ShortURL, error)) *URLStorage_GetShortByURL_Call {
	_c.Call.Return(run)
	return _c
}

// GetURLByID provides a mock function with given fields: ctx, ID
func (_m *URLStorage) GetURLByID(ctx context.Context, ID string) (*entity.ShortURL, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetURLByID")
	}

	var r0 *entity.ShortURL
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.ShortURL, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.ShortURL); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ShortURL)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// URLStorage_GetURLByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURLByID'
type URLStorage_GetURLByID_Call struct {
	*mock.Call
}

// GetURLByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *URLStorage_Expecter) GetURLByID(ctx interface{}, ID interface{}) *URLStorage_GetURLByID_Call {
	return &URLStorage_GetURLByID_Call{Call: _e.mock.On("GetURLByID", ctx, ID)}
}

func (_c *URLStorage_GetURLByID_Call) Run(run func(ctx context.Context, ID string)) *URLStorage_GetURLByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *URLStorage_GetURLByID_Call) Return(_a0 *entity.ShortURL, _a1 error) *URLStorage_GetURLByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *URLStorage_GetURLByID_Call) RunAndReturn(run func(context.Context, string) (*entity.ShortURL, error)) *URLStorage_GetURLByID_Call {
	_c.Call.Return(run)
	return _c
}

// TestConnection provides a mock function with given fields: ctx
func (_m *URLStorage) TestConnection(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TestConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// URLStorage_TestConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestConnection'
type URLStorage_TestConnection_Call struct {
	*mock.Call
}

// TestConnection is a helper method to define mock.On call
//   - ctx context.Context
func (_e *URLStorage_Expecter) TestConnection(ctx interface{}) *URLStorage_TestConnection_Call {
	return &URLStorage_TestConnection_Call{Call: _e.mock.On("TestConnection", ctx)}
}

func (_c *URLStorage_TestConnection_Call) Run(run func(ctx context.Context)) *URLStorage_TestConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *URLStorage_TestConnection_Call) Return(_a0 error) *URLStorage_TestConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *URLStorage_TestConnection_Call) RunAndReturn(run func(context.Context) error) *URLStorage_TestConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewURLStorage creates a new instance of URLStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewURLStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *URLStorage {
	mock := &URLStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
