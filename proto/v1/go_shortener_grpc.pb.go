// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/v1/go_shortener.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GoShortenerService_CreateShortURL_FullMethodName      = "/go_shortener.v1.GoShortenerService/CreateShortURL"
	GoShortenerService_BatchCreateShortURL_FullMethodName = "/go_shortener.v1.GoShortenerService/BatchCreateShortURL"
	GoShortenerService_DeleteShortURLs_FullMethodName     = "/go_shortener.v1.GoShortenerService/DeleteShortURLs"
	GoShortenerService_GetFullByID_FullMethodName         = "/go_shortener.v1.GoShortenerService/GetFullByID"
	GoShortenerService_GetStats_FullMethodName            = "/go_shortener.v1.GoShortenerService/GetStats"
	GoShortenerService_GetUserShortURLs_FullMethodName    = "/go_shortener.v1.GoShortenerService/GetUserShortURLs"
	GoShortenerService_Ping_FullMethodName                = "/go_shortener.v1.GoShortenerService/Ping"
)

// GoShortenerServiceClient is the client API for GoShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoShortenerServiceClient interface {
	CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error)
	BatchCreateShortURL(ctx context.Context, in *BatchCreateShortURLRequest, opts ...grpc.CallOption) (*BatchCreateShortURLResponse, error)
	DeleteShortURLs(ctx context.Context, in *DeleteShortURLsRequest, opts ...grpc.CallOption) (*DeleteShortURLsResponse, error)
	GetFullByID(ctx context.Context, in *GetFullByIDRequest, opts ...grpc.CallOption) (*GetFullByIDResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	GetUserShortURLs(ctx context.Context, in *GetUserShortURLsRequest, opts ...grpc.CallOption) (*GetUserShortURLsResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type goShortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoShortenerServiceClient(cc grpc.ClientConnInterface) GoShortenerServiceClient {
	return &goShortenerServiceClient{cc}
}

func (c *goShortenerServiceClient) CreateShortURL(ctx context.Context, in *CreateShortURLRequest, opts ...grpc.CallOption) (*CreateShortURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShortURLResponse)
	err := c.cc.Invoke(ctx, GoShortenerService_CreateShortURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShortenerServiceClient) BatchCreateShortURL(ctx context.Context, in *BatchCreateShortURLRequest, opts ...grpc.CallOption) (*BatchCreateShortURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateShortURLResponse)
	err := c.cc.Invoke(ctx, GoShortenerService_BatchCreateShortURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShortenerServiceClient) DeleteShortURLs(ctx context.Context, in *DeleteShortURLsRequest, opts ...grpc.CallOption) (*DeleteShortURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShortURLsResponse)
	err := c.cc.Invoke(ctx, GoShortenerService_DeleteShortURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShortenerServiceClient) GetFullByID(ctx context.Context, in *GetFullByIDRequest, opts ...grpc.CallOption) (*GetFullByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFullByIDResponse)
	err := c.cc.Invoke(ctx, GoShortenerService_GetFullByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShortenerServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, GoShortenerService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShortenerServiceClient) GetUserShortURLs(ctx context.Context, in *GetUserShortURLsRequest, opts ...grpc.CallOption) (*GetUserShortURLsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserShortURLsResponse)
	err := c.cc.Invoke(ctx, GoShortenerService_GetUserShortURLs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goShortenerServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, GoShortenerService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoShortenerServiceServer is the server API for GoShortenerService service.
// All implementations must embed UnimplementedGoShortenerServiceServer
// for forward compatibility.
type GoShortenerServiceServer interface {
	CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error)
	BatchCreateShortURL(context.Context, *BatchCreateShortURLRequest) (*BatchCreateShortURLResponse, error)
	DeleteShortURLs(context.Context, *DeleteShortURLsRequest) (*DeleteShortURLsResponse, error)
	GetFullByID(context.Context, *GetFullByIDRequest) (*GetFullByIDResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	GetUserShortURLs(context.Context, *GetUserShortURLsRequest) (*GetUserShortURLsResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedGoShortenerServiceServer()
}

// UnimplementedGoShortenerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGoShortenerServiceServer struct{}

func (UnimplementedGoShortenerServiceServer) CreateShortURL(context.Context, *CreateShortURLRequest) (*CreateShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortURL not implemented")
}
func (UnimplementedGoShortenerServiceServer) BatchCreateShortURL(context.Context, *BatchCreateShortURLRequest) (*BatchCreateShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateShortURL not implemented")
}
func (UnimplementedGoShortenerServiceServer) DeleteShortURLs(context.Context, *DeleteShortURLsRequest) (*DeleteShortURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortURLs not implemented")
}
func (UnimplementedGoShortenerServiceServer) GetFullByID(context.Context, *GetFullByIDRequest) (*GetFullByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullByID not implemented")
}
func (UnimplementedGoShortenerServiceServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedGoShortenerServiceServer) GetUserShortURLs(context.Context, *GetUserShortURLsRequest) (*GetUserShortURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserShortURLs not implemented")
}
func (UnimplementedGoShortenerServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoShortenerServiceServer) mustEmbedUnimplementedGoShortenerServiceServer() {}
func (UnimplementedGoShortenerServiceServer) testEmbeddedByValue()                            {}

// UnsafeGoShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoShortenerServiceServer will
// result in compilation errors.
type UnsafeGoShortenerServiceServer interface {
	mustEmbedUnimplementedGoShortenerServiceServer()
}

func RegisterGoShortenerServiceServer(s grpc.ServiceRegistrar, srv GoShortenerServiceServer) {
	// If the following call pancis, it indicates UnimplementedGoShortenerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GoShortenerService_ServiceDesc, srv)
}

func _GoShortenerService_CreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShortenerServiceServer).CreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoShortenerService_CreateShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShortenerServiceServer).CreateShortURL(ctx, req.(*CreateShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShortenerService_BatchCreateShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShortenerServiceServer).BatchCreateShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoShortenerService_BatchCreateShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShortenerServiceServer).BatchCreateShortURL(ctx, req.(*BatchCreateShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShortenerService_DeleteShortURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShortenerServiceServer).DeleteShortURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoShortenerService_DeleteShortURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShortenerServiceServer).DeleteShortURLs(ctx, req.(*DeleteShortURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShortenerService_GetFullByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShortenerServiceServer).GetFullByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoShortenerService_GetFullByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShortenerServiceServer).GetFullByID(ctx, req.(*GetFullByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShortenerService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShortenerServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoShortenerService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShortenerServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShortenerService_GetUserShortURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserShortURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShortenerServiceServer).GetUserShortURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoShortenerService_GetUserShortURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShortenerServiceServer).GetUserShortURLs(ctx, req.(*GetUserShortURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoShortenerService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoShortenerServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoShortenerService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoShortenerServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoShortenerService_ServiceDesc is the grpc.ServiceDesc for GoShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_shortener.v1.GoShortenerService",
	HandlerType: (*GoShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortURL",
			Handler:    _GoShortenerService_CreateShortURL_Handler,
		},
		{
			MethodName: "BatchCreateShortURL",
			Handler:    _GoShortenerService_BatchCreateShortURL_Handler,
		},
		{
			MethodName: "DeleteShortURLs",
			Handler:    _GoShortenerService_DeleteShortURLs_Handler,
		},
		{
			MethodName: "GetFullByID",
			Handler:    _GoShortenerService_GetFullByID_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _GoShortenerService_GetStats_Handler,
		},
		{
			MethodName: "GetUserShortURLs",
			Handler:    _GoShortenerService_GetUserShortURLs_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _GoShortenerService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/go_shortener.proto",
}
